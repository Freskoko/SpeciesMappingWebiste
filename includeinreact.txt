To implement this feature, you can use a React library like `react-leaflet` to display the map and handle click events. Here's a step-by-step guide on how to do this:

1. First, create a new React app using `create-react-app`:

```bash
npx create-react-app map-click-app
cd map-click-app
```

2. Install the `leaflet`, `react-leaflet`, and `@react-leaflet/core` packages:

```bash
npm install leaflet react-leaflet @react-leaflet/core
```

3. Create a new `MapComponent.js` file inside the `src` folder and paste the following code:

```javascript
import React from 'react';
import { MapContainer, TileLayer } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

const MapComponent = ({ onMapClick }) => {
  const handleClick = (e) => {
    const { lat, lng } = e.latlng;
    onMapClick(lat, lng);
  };

  return (
    <MapContainer
      center={[56.78, 12.34]} // Initial map center
      zoom={13}
      style={{ height: '100vh', width: '100%' }}
      onClick={handleClick}
      >
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        />
      </MapContainer>
    );
  };
  
  export default MapComponent;
  ```
  
  4. Update the `src/App.js` file to use the `MapComponent`:
  
  ```javascript
  import React from 'react';
  import MapComponent from './MapComponent';
  
  function App() {
    const handleMapClick = (lat, lng) => {
      console.log('Clicked on:', lat, lng);
      // Send the lat and long to the server here
    };
  
    return (
      <div>
        <MapComponent onMapClick={handleMapClick} />
      </div>
    );
  }
  
  export default App;
  ```
  
  5. Run the React app:
  
  ```bash
  npm start
  ```
  
  Now you have a working map that sends the latitude and longitude to the `handleMapClick` function when a user clicks on the map. You can add code inside this function to send the coordinates to your server, for example, using the `fetch` function to make a

  POST request with the latitude and longitude:

```javascript
const handleMapClick = async (lat, lng) => {
  console.log('Clicked on:', lat, lng);

  // Send the lat and long to the server
  try {
    const response = await fetch('http://localhost:5000/your_endpoint', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ latitude: lat, longitude: lng }),
    });

    if (response.ok) {
      const result = await response.json();
      // Handle the response from the server
      console.log(result);
    } else {
      console.error('Error sending coordinates to the server:', response.status);
    }
  } catch (error) {
    console.error('Error while sending coordinates to the server:', error);
  }
};
```

Replace `'http://localhost:5000/your_endpoint'` with the actual URL of your server and endpoint to receive the latitude and longitude.